---
# CI Integration
image: python:3.7-buster

stages:
  - lint
  - build
  - tests
  - deploy

before_script:
  - pip install --cache-dir .pip/ --requirement requirements.txt

variables:
  DEBUG_SPHINX: 0
  DEBUG_SONAR: 0
  DEBUG_FLAKE8: 0

tests:
  stage: tests
  before_script:
    - pip --cache-dir .pip install -r requirements-tests.txt
  script: |
    export PYTHONPATH=${PYTHONPATH}:bump-release
    pytest --cov=bump_release ./tests
  cache:
    paths:
      - .pip/
  tags:
    - python3.7
    - docker

# Checks python code against flake8
flake8:
  stage: lint
  before_script:
    - pip --cache-dir .pip/ install flake8
  script: |
    [[ ${DEBUG_FLAKE8} -eq 1 ]] && ls -la
    flake8 ./bump_release
  tags:
    - python3.7
    - docker

# Check code quality against sonarqube
# Checks python/js/css code against SONAR
sonar:
  stage: lint
  variables:
    SONAR_VERSION: 4.3.0.2102-linux
    SONAR_SCANNER_OPTS: "-Xmx512m"
    SONAR_HOST: "http://sonarqube.ville.tg/"
    # yamllint disable-line rule:line-length
    SONAR_SCANNER_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_VERSION}.zip
  before_script:
    - apt-get --yes -qq update
    - apt-get --yes -qq install openjdk-11-jre-headless
    # Installs sonar-runner ZIP file
    - if [[ ! -d sonar-scanner-${SONAR_VERSION} ]]; then
    -   wget --no-verbose ${SONAR_SCANNER_URL}
    -   unzip -q sonar-scanner-cli-${SONAR_VERSION}.zip
    - fi
    - test $DEBUG_SONAR -eq 1 && ls -la sonar-scanner-${SONAR_VERSION}/
    - test $DEBUG_SONAR -eq 1 && ls -la sonar-scanner-${SONAR_VERSION}/bin/
    # yamllint disable-line rule:line-length
    - test $DEBUG_SONAR -eq 1 && sonar-scanner-${SONAR_VERSION}/bin/sonar-scanner --version
  script: |
    # Runs the sonar-runner
    export SONAR_USER_HOME=.
    export SONAR_SCANNER_OPTS=${SONAR_SCANNER_OPTS}
    export PYTHONPATH=${PYTHONPATH}:.
    SONAR_ARGS=-Dsonar.branch=${CI_COMMIT_BRANCH} -Dsonar.host.url=${SONAR_HOST}
    if [[ ${DEBUG_SONAR} -eq 1 ]]; then
      EXTRA_ARGS=${EXTRA_ARGS} -X
    fi
    # yamllint disable-line rule:line-length
    ./sonar-scanner-${SONAR_VERSION}/bin/sonar-scanner ${SONAR_ARGS} .
  cache:
    paths:
      - sonar-scanner-${SONAR_VERSION}/
      - .pip/
  tags:
    - python3.7
    - docker

# Builds sphinx docs
pages:
  stage: build
  before_script:
    - pip --cache-dir .pip/ install -r requirements-docs.txt
  script: |
    cd ./docs
    make html
    # Copy built files to /public
    mv build/html/ ../public/
  artifacts:
    paths:
      - public
  cache:
    paths:
      - .pip/
  tags:
    - python3.7
    - docker

release_staging:
  stage: deploy
  before_script:
    - pip --cache-dir .pip/ install -r requirements-deploy.txt
  script: |
    python3 setup.py sdist bdist_wheel
    python3 -m twine upload \
      --repository-url https://test.pypi.org/legacy/ \
      --username "$USERNAME_STAGING" \
      --password "$PASSWORD_STAGING" \
      --skip-existing \
      dist/*
  cache:
    paths:
      - .pip/
  tags:
    - python3.7
    - docker

release:
  stage: deploy
  before_script:
    - pip --cache-dir .pip/ install -r requirements-deploy.txt
  script: |
    python3 setup.py sdist bdist_wheel
    python3 -m twine upload \
      --username "$USERNAME" \
      --password "$PASSWORD" \
      --skip-existing \
      dist/*
  only:
    - master
    - tags
  cache:
    paths:
      - .pip/
  tags:
    - python3.7
    - docker
